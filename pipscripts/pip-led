#! /bin/bash

export MYNAME=$(basename $0)
export MYDIR=$(dirname $0)
export MYDIR=$(readlink -m "$MYDIR")
export VERSION="0.0.2"

OPTION_MONITORED_HOST=""
OPTION_PROTECTED=""
OPTION_CHANNEL_GREEN=""
OPTION_CHANNEL_RED=""
OPTION_CHANNEL_BLUE=""
OPTION_FLASH=""

if [ -f "$MYDIR/utilityfunctions.sh" ]; then
    source $MYDIR/utilityfunctions.sh
else
    echo "File '$MYDIR/utilityfunctions.sh' was not found." >&2
    exit 5
fi

function printHelpAndExit()
{
    cat <<EOF 
Usage:
  $MYNAME [OPTION]... HOST_NAME

  $MYNAME - Security monitor script.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.

  --flash
  --protected          Monitor a protected resource.
  --led1
  --led2
EOF
  exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,version,verbose,flash,protected,led1,led2" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            ;;

        -v|--version)
            shift
            printVersionAndExit
            ;;

        --protected)
            shift
            OPTION_PROTECTED="true"
            ;;

        --flash)
            shift
            OPTION_FLASH="true"
            ;;

        --led1)
            shift
            OPTION_PORT="LED1"
            ;;

        --led2)
            shift
            OPTION_PORT="LED2"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

#
# Checking the system.
#
if [ -z $(which "gpio") ]; then
    printError "The gpio program was not found."
    exit 6
fi

#
# Checking command line options.
#
if [ -n "$1" ]; then
    OPTION_MONITORED_HOST="$1"
fi

if [ "$OPTION_PORT" == "LED1" ]; then
    OPTION_CHANNEL_GREEN=14
    OPTION_CHANNEL_RED=15
    OPTION_CHANNEL_BLUE=18
elif [ "$OPTION_PORT" == "LED2" ]; then
    OPTION_CHANNEL_GREEN=17
    OPTION_CHANNEL_RED=27
    OPTION_CHANNEL_BLUE=22
fi

function initialize_gpio()
{
    #
    # Setting the GPIO ports to output mode.
    #
    for id in $OPTION_CHANNEL_GREEN $OPTION_CHANNEL_RED $OPTION_CHANNEL_BLUE; do
        gpio -g mode $id out
    done
}

function set_color_to()
{
    while [ -n "$1" ]; do
        case "$1" in 
            --dark)
                gpio -g write $OPTION_CHANNEL_GREEN 0
                gpio -g write $OPTION_CHANNEL_RED 0
                gpio -g write $OPTION_CHANNEL_BLUE 0
                shift
                ;;

            --red)
                gpio -g write $OPTION_CHANNEL_GREEN 0
                gpio -g write $OPTION_CHANNEL_RED 1
                gpio -g write $OPTION_CHANNEL_BLUE 0

                shift
                ;;

            --green)
                gpio -g write $OPTION_CHANNEL_GREEN 1
                gpio -g write $OPTION_CHANNEL_RED 0
                gpio -g write $OPTION_CHANNEL_BLUE 0
                shift
                ;;
            
            --yellow)
                gpio -g write $OPTION_CHANNEL_GREEN 1
                gpio -g write $OPTION_CHANNEL_RED 1
                gpio -g write $OPTION_CHANNEL_BLUE 0
                shift
                ;;
            
            --blue)
                gpio -g write $OPTION_CHANNEL_GREEN 0
                gpio -g write $OPTION_CHANNEL_RED 0
                gpio -g write $OPTION_CHANNEL_BLUE 1
                shift
                ;;
            
            --white)
                gpio -g write $OPTION_CHANNEL_GREEN 1
                gpio -g write $OPTION_CHANNEL_RED 1
                gpio -g write $OPTION_CHANNEL_BLUE 1
                shift
                ;;

            --short-sleep)
                sleep 0.5 
                shift 
                ;;

            --)
                break
                ;;

            *)
                break
                ;;
        esac
    done
}

function atexit_handler()
{
    set_color_to --dark
}

function led_test()
{
    set_color_to --red
    sleep 0.10

    set_color_to --green
    sleep 0.10

    set_color_to --blue
    sleep 0.10
 
    set_color_to --dark
}

trap atexit_handler EXIT

led_test

#
#
#
while true; do
    if [ "$ok" == "true" ]; then
        set_color_to --green
        sleep 5
    elif [ "$ok" == "false" -a -n "$OPTION_PROTECTED" ]; then
        for i in $(seq 0 5); do
            set_color_to --red --short-sleep --dark --short-sleep
        done
    elif [ "$ok" == "false" ]; then
        set_color_to --dark
        sleep 5
    fi

    if [ -n "$OPTION_FLASH" ]; then
        set_color_to --white
    fi

    ok="true"
    timeout 0.3 ping -c 1 -i 1 "$OPTION_MONITORED_HOST" \
        2>/dev/null >/dev/null
    if [ $? -ne 0 ]; then 
        ok="false"
    fi
done

