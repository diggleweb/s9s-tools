#! /bin/bash

MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.1"
VERBOSE=""
#LOGFILE="$HOME/.pip/${MYNAME}.log"

APT_UPDATED=""

TERM_ERASE_EOL="\033[K"
TERM_HOME="\033[0;0H"
TERM_NORMAL="\033[0;39m"
TERM_BOLD="\033[1m"
TERM_INVERSE="\033[7m"
XTERM_COLOR_RED="\033[0;31m"
XTERM_COLOR_GREEN="\033[0;32m"
XTERM_COLOR_ORANGE="\033[0;33m"
XTERM_COLOR_BLUE="\033[0;34m"
XTERM_COLOR_PURPLE="\033[0;35m"
XTERM_COLOR_CYAN="\033[0;36m"
XTERM_COLOR_LIGHT_GRAY="\033[0;37m"
XTERM_COLOR_DARK_GRAY="\033[1;30m"
XTERM_COLOR_LIGHT_RED="\033[1;31m"
XTERM_COLOR_LIGHT_GREEN="\033[1;32m"
XTERM_COLOR_YELLOW="\033[1;33m"
XTERM_COLOR_LIGHT_BLUE="\033[1;34m"
XTERM_COLOR_LIGHT_PURPLE="\033[1;35m"
XTERM_COLOR_LIGHT_CYAN="\033[1;36m"
XTERM_COLOR_WHITE="\033[1;37m"

OWNER_COLOR="$XTERM_COLOR_ORANGE"
USER_COLOR="\033[1m\033[38;5;212m"
EMAIL_COLOR="$XTERM_COLOR_PURPLE"
PROJECT_COLOR="\033[1m\033[38;5;210m"
TEST_COLOR="\033[2m\033[38;5;190m"
HOST_COLOR="\033[1m\033[38;5;184m"
INC_COLOR="\033[1m\033[36m"
QUERY_COLOR="\033[1m\033[36m"
COMMENT_COLOR="\033[1m\033[38;5;12m"
IP_COLOR="\033[2m\033[38;5;201m"
FILE_COLOR="\033[38;5;119m"
GROUP_COLOR="\033[2m\033[38;5;7m"
DEVICE_COLOR="\033[1m\033[38;5;203m"

OK_COLOR="$XTERM_COLOR_GREEN"
WARN_COLOR="$XTERM_COLOR_YELLOW"
ERR_COLOR="$XTERM_COLOR_RED"
NORM_COLOR="$XTERM_COLOR_BLUE"
DATE_COLOR="\033[1m\033[38;5;215m"

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

#
# $*: the error message
#
# Prints an error message to the standard error. The text will not mixed up with
# the data that is printed to the standard output.
#
function printError()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    echo -e "ERROR $*" >&2

    if [ "$LOGFILE" ]; then
        echo -e "$datestring ERROR $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

#
# $*: the message
#
# Prints all the arguments but only if the program is in the verbose mode.
#
function printVerbose()
{
    local datestring=$(date "+%Y-%m-%d %H:%M:%S")

    if [ "$VERBOSE" == "true" ]; then
        echo -e "DEBUG $*" >&2
    fi

    if [ "$LOGFILE" ]; then
        echo -e "$datestring DEBUG $MYNAME($$) $*" >>"$LOGFILE"
    fi
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... DEVICE 

  $MYNAME - Turns on and off pdu outlets.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.
  --long               Print detailed/long list.
  --server=LIST        The names of the remote servers to work with.

  --list               List mounts.
  --install            Install necessary software.
  --mount              Mount the remote export locally.
  --umount             Unmount the remote export.

EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,long,list,install,mount,umount,
server:" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --long)
            shift
            LONG_OPTION="true"
            ;;

        --list)
            shift
            OPTION_LIST="true"
            ;;

        --install)
            shift
            OPTION_INSTALL="true"
            ;;

        --mount)
            shift
            OPTION_MOUNT="true"
            ;;

        --umount)
            shift
            OPTION_UMOUNT="true"
            ;;

        --server)
            OPTION_SERVER="$2"
            shift 2
            ;; 

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

function check_package()
{
    local binary_name="$1"
    local package_name="$2"

    if [ -z "$(which $binary_name)" ]; then
        printVerbose "The $binary_name is not installed."
        if [ -z "$APT_UPDATED" ]; then
            sudo apt update  --yes
            APT_UPDATED="yes"
        fi
        sudo apt install --yes "$package_name"
    else
        printVerbose "The $binary_name is installed."
    fi
    
    if [ -z "$(which $binary_name)" ]; then
        printError "Can not install the $package_name package."
        exit 5
    fi

}

function check_packages()
{
    check_package "smbpasswd"   "samba"
    check_package "smbclient"   "smbclient"
    check_package "man"         "man-db"
    check_package "mount.cifs"  "cifs-utils"
}

function samba_user_exists()
{
    local username="$1"
    local line=$(sudo pdbedit -L $username 2>/dev/null)

    if [ -z "$line" ]; then
        return 1
    else
        return 0
    fi
}

function check_user()
{
    local username="$1"
    local password="$2"

    if ! samba_user_exists "$username"; then
        printVerbose "Creating samba user."
        echo -e "$password\n$password" | \
            sudo smbpasswd -s -a "$username"
    else
        printVerbose "Samba user $username exists."
    fi
}

function check_shares()
{
    local config_file=/etc/samba/smb.conf
    local username="$1"
    local hostname=$(hostname)

    if grep --quiet "$username" "$config_file"; then
        printVerbose "The share $username in $config_file exists."
        return 0
    fi

    printVerbose "Adding shares..."
    sudo tee -a $config_file <<EOF
[$hostname]
    comment = File-system on $hostname.
    path = /
    browsable = yes
    valid users = $username
    read only = no
    create mask = 0755

[$username-$hostname]
    comment = Home for $username on $hostname.
    path = /home/$username
    browsable = yes
    valid users = $username
    read only = no
    create mask = 0755

EOF

    sudo service smbd restart
}

function mount_cifs()
{
    local server
    local local_path 
    local local_home_path

    for server in $(echo $OPTION_SERVER | tr ',' ' '); do
        server=$(echo $server | tr '[A-Z]' '[a-z]')
        local_path="/net/$server"
        local_home_path="$HOME/net/$server"

        printVerbose "Mounting $local_path..."
        if [ ! -d "$local_path" ]; then
            sudo mkdir -p "$local_path"
        fi

        sudo mount \
            -t cifs \
            //$server/$server \
            "$local_path" \
            -o user=pipas,pass=p

        printVerbose "Mounting $local_home_path..."
        if [ ! -d "$local_home_path" ]; then
            mkdir -p "$local_home_path"
        fi
        
        sudo mount \
            -t cifs \
            //$server/pipas-$server \
            "$local_home_path" \
            -o user=pipas,pass=p

        df -h "$local_path" "$local_home_path"
    done
}

function umount_cifs()
{
    local server
    local local_path 
    local local_home_path

    for server in $(echo $OPTION_SERVER | tr ',' ' '); do
        server=$(echo $server | tr '[A-Z]' '[a-z]')
        local_path="/net/$server"
        local_home_path="$HOME/net/$server"

        sudo umount $local_path
        sudo umount $local_home_path
    done
}


#
# Checking the command line options.
#
if [ -n "$OPTION_MOUNT" -a -z "$OPTION_SERVER" ]; then
    printError "The --mount option requires the --server option."
    exit 6
fi

if [ -n "$OPTION_UMOUNT" -a -z "$OPTION_SERVER" ]; then
    printError "The --umount option requires the --server option."
    exit 6
fi

#
# Performing what we are requested to do.
#
if [ -n "$OPTION_INSTALL" ]; then
    check_packages
    check_user      "pipas" "p"
    check_shares    "pipas"
fi

if [ -n "$OPTION_MOUNT" ]; then
    mount_cifs
elif [ -n "$OPTION_UMOUNT" ]; then
    umount_cifs
fi

if [ -n "$OPTION_LIST" ]; then
    printVerbose "Executing: smbtree -Upipas%p"
    smbtree -Upipas%p
fi


