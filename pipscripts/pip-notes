#! /bin/bash

MYNAME=$(basename "$0")
MYDIR=$(dirname "$0")
MYDIR=$(readlink -m "$MYDIR")
VERSION="0.0.5"
VERBOSE=""
LOGFILE="$HOME/.pip/${MYNAME}.log"

if [ -f "$MYDIR/utilityfunctions.sh" ]; then
    source $MYDIR/utilityfunctions.sh
else
    echo "File '$MYDIR/utilityfunctions.sh' was not found." >&2
    exit 5
fi

#
# Prints the software version and exits.
#
function printVersionAndExit()
{
    echo "$MYNAME Version $VERSION on $(hostname)" >&2
}

function printHelpAndExit()
{
cat <<EOF
Usage:
  $MYNAME [OPTION]... [HOSTNAME]...

  $MYNAME - Lists and controls servers.

  -h, --help           Print this help and exit.
  -v, --version        Print version information and exit.
  --verbose            Print more messages.
  --log-file=FILE      Store all the messages in the given file too.
  
  --list               List the power distribution units.
  --cat                Print the note itself.
  --edit               Edit an existing note.
  --push               Push data to the server.
  --tos                Print a table of contents HTML list.

  --long               Print detailed/long list.
  --print-files        Print the full path of the files.
  --html               Produce HTML output.

EXAMPLE:
  pip-notes --tos --html
  pip-notes --cat --html 00-raspberry 
EOF
    exit 0
}

ARGS=$(\
    getopt \
        -o hvs:c:l \
        -l "help,verbose,version,log-file:,\
long,print-report,print-files,html,\
list,cat,edit,push,tos" \
        -- "$@")

if [ $? -ne 0 ]; then
    exit 6
fi

eval set -- "$ARGS"
while true; do
    case "$1" in
        -h|--help)
            shift
            printHelpAndExit
            ;;

        --verbose)
            shift
            VERBOSE="true"
            VERBOSE_OPTION="--verbose"
            ;;

        -v|--version)
            shift
            VERSION_OPTION="--version"
            ;;

        --log-file)
            shift
            LOGFILE=$(readlink -m "$1")
            shift
            ;;

        --list)
            shift
            LIST_OPTION="true"
            ;;

        --cat)
            shift
            CAT_OPTION="true"
            ;;
        
        --edit)
            shift
            EDIT_OPTION="true"
            ;;

        --push)
            shift
            PUSH_OPTION="true"
            ;;

        --tos)
            shift
            TOS_OPTION="true"
            ;;

        --html)
            shift
            HTML_OPTION="true"
            ;;

        --long)
            shift
            LONG_OPTION="true"
            ;;

        --print-report)
            shift
            OPTION_PRINT_REPORT="yes"
            ;;

        --print-files)
            shift
            OPTION_PRINT_FILES="true"
            ;;

        --)
            shift
            break
            ;;

        *)
            break
            ;;
    esac
done

ARGUMENTS=$*
NOTE=$1

function print_debug()
{
    cat <<EOF

<h2>Debug&Help</h2>
<p>Debug and help about the script created this page.</p>
<pre>
      <b>MYNAME</b>: '$MYNAME'
       <b>MYDIR</b>: '$MYDIR'
     <b>VERSION</b>: '$VERSION'
     <b>scripts</b>: 'clustercontrol-enterprise/tests/scripts/test_ui/'
         <b>pwd</b>: '$PWD'
   <b>NOTES_DIR</b>: '$NOTES_DIR'
        <b>NOTE</b>: '$NOTE'
</pre>
EOF
}

function title_of_file()
{
    local html_file
    local title

    while [ -n "$1" ]; do
        case "$1" in
            --html-file)
                html_file="$2"
                shift 2
                ;;

            *)
                break
                ;;
        esac
    done

    if [ -z "$html_file" ]; then
        printError "title_of_file(): HTML file expected."
        return 1
    fi

    if [ ! -f "$html_file" ]; then
        printError "title_of_file(): File '$html_file' not found."
        return 1
    fi

    title=$(head -n 1 "$html_file")
    title=$(echo "$title" | sed -e 's/<[^>]*>//g')
    title=$(echo $title)
    if [ -z "$HTML_OPTION" ]; then
        echo $title
    else
        html_file=$(basename $html_file)
        echo "    <li>"
        echo "      <a class='mylink' href='?page=notes&note=$html_file'>$title</a>"
        echo "    </li>"
    fi

    return 0
}

function list_notes_tos()
{
    if [ -n "$HTML_OPTION" ]; then    
        echo "<h2>Table Of Contents</h2>"
        echo "<ol>"
        echo "  <li>Private Notes</li>"
        echo "  <ol>"
    fi

    for file in $NOTES_DIR/*.html; do
        basename=$(basename "$file" .html)
    
        if [ ! -f "$file" ]; then
            continue
        fi

        if [ -n "$HTML_OPTION" ]; then
            title_of_file --html-file "$file"
        else
            echo -n "  * "
            title_of_file --html-file "$file"
        fi
    done
    
    if [ -n "$HTML_OPTION" ]; then    
        echo "  </ol>"
        echo "</ol>"
        print_debug
    fi
}

function list_notes_long()
{
    for file in $NOTES_DIR/*.html; do
        basename=$(basename "$file" .html)
    
        if [ ! -f "$file" ]; then
            continue
        fi

        if [ -z "$HTML_OPTION" ]; then
            title=$(title_of_file --html-file "$file")

            if [ -n "$OPTION_PRINT_FILES" ]; then
                printf "%-24s " "$file"
            else
                printf "$FILE_COLOR"
                printf "%-20s " "$basename"
                printf "$TERM_NORMAL"
            fi

            printf "$TERM_BOLD"
            printf "%s"     "$title"
            printf "$TERM_NORMAL"

            printf "\n"
        else
            title_of_file --html-file "$file"
        fi
    done
}

function cat_note()
{
    local file
    local tmp

    echo "1"
    tmp=$(which html2text)

    if [ -z "$tmp" ]; then
        echo "The 'html2text' program was not found."
        exit 6
    fi

    echo "2"
    file="$NOTES_DIR/${1}"
    if [ ! -f "$file" ]; then
        file="$NOTES_DIR/${1}.html"
    fi

    echo "file: $file"
    if [ -f "$file" ]; then
        if [ -n "$HTML_OPTION" ]; then
            cat $file
            print_debug
        else
            html2text -style pretty -width 100 -utf8 "$file"
        fi
    else
        echo "File $file was not found."
    fi
}

function edit_note()
{
    local file="$NOTES_DIR/${1}.html"
    gvim $file
}

function push_to_server()
{
    pushd $HOME/.pip
    ./push.sh www
    popd
}

NOTES_DIR="/var/www/html/ft_install/notes/pipas"
if [ ! -d "$NOTES_DIR" ]; then
    REMOTE_USER="$USER"
    NOTES_DIR="$HOME/.pip/notes/$REMOTE_USER"
fi

if [ -n "$LIST_OPTION" ]; then
    list_notes_long
elif [ -n "$TOS_OPTION" ]; then
    list_notes_tos
elif [ -n "$CAT_OPTION" ]; then
    cat_note $1
elif [ -n "$EDIT_OPTION" ]; then
    edit_note $1
elif [ -n "$PUSH_OPTION" ]; then
    push_to_server
fi
